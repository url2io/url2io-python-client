# coding: utf-8

"""
    URL2io API client

    URL2io API 包含 URL2Article 和 URL2NLP 两个服务，实现网页结构智能解析和文本信息智能处理。  当前文档包含所有可用的 API 及使用方法([详细文档](http://url2io.applinzi.com/docs))。  API使用 `token`进行认证，[注册](http://url2io.applinzi.com/accounts/register)后可得。[点此查看token](http://url2io.applinzi.com/console/user/profile)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: url2@sina.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NlpWordCutItemForResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'word': 'str',
        'flag': 'str',
        'flag_desc': 'str'
    }

    attribute_map = {
        'word': 'word',
        'flag': 'flag',
        'flag_desc': 'flag_desc'
    }

    def __init__(self, word=None, flag=None, flag_desc=None):  # noqa: E501
        """NlpWordCutItemForResponse - a model defined in Swagger"""  # noqa: E501

        self._word = None
        self._flag = None
        self._flag_desc = None
        self.discriminator = None

        self.word = word
        if flag is not None:
            self.flag = flag
        if flag_desc is not None:
            self.flag_desc = flag_desc

    @property
    def word(self):
        """Gets the word of this NlpWordCutItemForResponse.  # noqa: E501

        词语  # noqa: E501

        :return: The word of this NlpWordCutItemForResponse.  # noqa: E501
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this NlpWordCutItemForResponse.

        词语  # noqa: E501

        :param word: The word of this NlpWordCutItemForResponse.  # noqa: E501
        :type: str
        """
        if word is None:
            raise ValueError("Invalid value for `word`, must not be `None`")  # noqa: E501

        self._word = word

    @property
    def flag(self):
        """Gets the flag of this NlpWordCutItemForResponse.  # noqa: E501

        词性标签，如n、v等。有关词性标签和词性的描述，请访问[词性标注](http://url2io.applinzi.com/#url2nlp_pos_tagging)。  # noqa: E501

        :return: The flag of this NlpWordCutItemForResponse.  # noqa: E501
        :rtype: str
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this NlpWordCutItemForResponse.

        词性标签，如n、v等。有关词性标签和词性的描述，请访问[词性标注](http://url2io.applinzi.com/#url2nlp_pos_tagging)。  # noqa: E501

        :param flag: The flag of this NlpWordCutItemForResponse.  # noqa: E501
        :type: str
        """

        self._flag = flag

    @property
    def flag_desc(self):
        """Gets the flag_desc of this NlpWordCutItemForResponse.  # noqa: E501

        词性描述，如动词、名词等  # noqa: E501

        :return: The flag_desc of this NlpWordCutItemForResponse.  # noqa: E501
        :rtype: str
        """
        return self._flag_desc

    @flag_desc.setter
    def flag_desc(self, flag_desc):
        """Sets the flag_desc of this NlpWordCutItemForResponse.

        词性描述，如动词、名词等  # noqa: E501

        :param flag_desc: The flag_desc of this NlpWordCutItemForResponse.  # noqa: E501
        :type: str
        """

        self._flag_desc = flag_desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NlpWordCutItemForResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NlpWordCutItemForResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
