# coding: utf-8

"""
    URL2io API client

    URL2io API 包含 URL2Article 和 URL2NLP 两个服务，实现网页结构智能解析和文本信息智能处理。  当前文档包含所有可用的 API 及使用方法([详细文档](http://url2io.applinzi.com/docs))。  API使用 `token`进行认证，[注册](http://url2io.applinzi.com/accounts/register)后可得。[点此查看token](http://url2io.applinzi.com/console/user/profile)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: url2@sina.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ArticleForResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'url': 'str',
        '_date': 'str',
        'content': 'str',
        'text': 'str',
        'markdown': 'str',
        'next': 'str'
    }

    attribute_map = {
        'title': 'title',
        'url': 'url',
        '_date': 'date',
        'content': 'content',
        'text': 'text',
        'markdown': 'markdown',
        'next': 'next'
    }

    def __init__(self, title=None, url=None, _date=None, content=None, text=None, markdown=None, next=None):  # noqa: E501
        """ArticleForResponse - a model defined in Swagger"""  # noqa: E501

        self._title = None
        self._url = None
        self.__date = None
        self._content = None
        self._text = None
        self._markdown = None
        self._next = None
        self.discriminator = None

        self.title = title
        self.url = url
        self._date = _date
        self.content = content
        if text is not None:
            self.text = text
        if markdown is not None:
            self.markdown = markdown
        if next is not None:
            self.next = next

    @property
    def title(self):
        """Gets the title of this ArticleForResponse.  # noqa: E501

        网页正文的标题  # noqa: E501

        :return: The title of this ArticleForResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ArticleForResponse.

        网页正文的标题  # noqa: E501

        :param title: The title of this ArticleForResponse.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def url(self):
        """Gets the url of this ArticleForResponse.  # noqa: E501

        要提取正文网页的网址  # noqa: E501

        :return: The url of this ArticleForResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArticleForResponse.

        要提取正文网页的网址  # noqa: E501

        :param url: The url of this ArticleForResponse.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def _date(self):
        """Gets the _date of this ArticleForResponse.  # noqa: E501

        文章的发布日期。ISO 8601格式，2014-01-01 01:01:01。如果没有则返回null  # noqa: E501

        :return: The _date of this ArticleForResponse.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ArticleForResponse.

        文章的发布日期。ISO 8601格式，2014-01-01 01:01:01。如果没有则返回null  # noqa: E501

        :param _date: The _date of this ArticleForResponse.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def content(self):
        """Gets the content of this ArticleForResponse.  # noqa: E501

        网页正文  # noqa: E501

        :return: The content of this ArticleForResponse.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ArticleForResponse.

        网页正文  # noqa: E501

        :param content: The content of this ArticleForResponse.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def text(self):
        """Gets the text of this ArticleForResponse.  # noqa: E501

        网页正文的纯文字格式。在请求的fields中指定text时，返回此字段。  # noqa: E501

        :return: The text of this ArticleForResponse.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ArticleForResponse.

        网页正文的纯文字格式。在请求的fields中指定text时，返回此字段。  # noqa: E501

        :param text: The text of this ArticleForResponse.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def markdown(self):
        """Gets the markdown of this ArticleForResponse.  # noqa: E501

        网页正文的 markdown 格式。在请求的fields中指定markdown时，返回此字段。  # noqa: E501

        :return: The markdown of this ArticleForResponse.  # noqa: E501
        :rtype: str
        """
        return self._markdown

    @markdown.setter
    def markdown(self, markdown):
        """Sets the markdown of this ArticleForResponse.

        网页正文的 markdown 格式。在请求的fields中指定markdown时，返回此字段。  # noqa: E501

        :param markdown: The markdown of this ArticleForResponse.  # noqa: E501
        :type: str
        """

        self._markdown = markdown

    @property
    def next(self):
        """Gets the next of this ArticleForResponse.  # noqa: E501

        网页的下一页链接。在请求的fields中指定markdown时，返回此字段。若没有则返回null  # noqa: E501

        :return: The next of this ArticleForResponse.  # noqa: E501
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this ArticleForResponse.

        网页的下一页链接。在请求的fields中指定markdown时，返回此字段。若没有则返回null  # noqa: E501

        :param next: The next of this ArticleForResponse.  # noqa: E501
        :type: str
        """

        self._next = next

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArticleForResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArticleForResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
