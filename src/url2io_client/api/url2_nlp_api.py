# coding: utf-8

"""
    URL2io API client

    URL2io API 包含 URL2Article 和 URL2NLP 两个服务，实现网页结构智能解析和文本信息智能处理。  当前文档包含所有可用的 API 及使用方法([详细文档](http://url2io.applinzi.com/docs))。  API使用 `token`进行认证，[注册](http://url2io.applinzi.com/accounts/register)后可得。[点此查看token](http://url2io.applinzi.com/console/user/profile)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: url2@sina.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from url2io_client.api_client import ApiClient


class URL2NLPApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_keywords(self, body, **kwargs):  # noqa: E501
        """关键词提取接口  # noqa: E501

        支持提取出文本中最有代表性的关键词，并给出对应的权重。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keywords(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: 需要分词的文本 (required)
        :param int top_k: 返回关键词的个数，默认10，最大50
        :param bool with_weight: 是否返回每个关键词的权重，默认:不返回。
        :param str allow_pos: 允许的关键词词性列表，如只返回动词和名词可以表示为 v,n，默认:允许全部词性。有关词性标签和词性描述，请访问[词性标注](http://url2io.applinzi.com/#url2nlp_pos_tagging)。
        :return: list[NlpKeywordsItemForResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_keywords_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_keywords_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_keywords_with_http_info(self, body, **kwargs):  # noqa: E501
        """关键词提取接口  # noqa: E501

        支持提取出文本中最有代表性的关键词，并给出对应的权重。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keywords_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: 需要分词的文本 (required)
        :param int top_k: 返回关键词的个数，默认10，最大50
        :param bool with_weight: 是否返回每个关键词的权重，默认:不返回。
        :param str allow_pos: 允许的关键词词性列表，如只返回动词和名词可以表示为 v,n，默认:允许全部词性。有关词性标签和词性描述，请访问[词性标注](http://url2io.applinzi.com/#url2nlp_pos_tagging)。
        :return: list[NlpKeywordsItemForResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'top_k', 'with_weight', 'allow_pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keywords" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_keywords`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'top_k' in params:
            query_params.append(('top_k', params['top_k']))  # noqa: E501
        if 'with_weight' in params:
            query_params.append(('with_weight', params['with_weight']))  # noqa: E501
        if 'allow_pos' in params:
            query_params.append(('allow_pos', params['allow_pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token_in_query']  # noqa: E501

        return self.api_client.call_api(
            '/v1/nlp/keywords', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NlpKeywordsItemForResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_word_cut(self, body, **kwargs):  # noqa: E501
        """中文分词和词性注解接口  # noqa: E501

        支持中文分词、去停用词、新词发现、词性注解等功能。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_word_cut(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: 需要分词的文本 (required)
        :param bool keep_stopwords: 是否保留停用词
        :param bool symbols: 是否返回特殊字符
        :param bool dict: 是否使用领域词典(预留)
        :param bool custom_dict: 是否使用自定义词典（预留）
        :param bool with_flag: 是否返回词性标注
        :param bool hmm: 是否使用新词发现
        :return: list[NlpWordCutItemForResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_word_cut_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_word_cut_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_word_cut_with_http_info(self, body, **kwargs):  # noqa: E501
        """中文分词和词性注解接口  # noqa: E501

        支持中文分词、去停用词、新词发现、词性注解等功能。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_word_cut_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: 需要分词的文本 (required)
        :param bool keep_stopwords: 是否保留停用词
        :param bool symbols: 是否返回特殊字符
        :param bool dict: 是否使用领域词典(预留)
        :param bool custom_dict: 是否使用自定义词典（预留）
        :param bool with_flag: 是否返回词性标注
        :param bool hmm: 是否使用新词发现
        :return: list[NlpWordCutItemForResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'keep_stopwords', 'symbols', 'dict', 'custom_dict', 'with_flag', 'hmm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_word_cut" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_word_cut`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keep_stopwords' in params:
            query_params.append(('keep_stopwords', params['keep_stopwords']))  # noqa: E501
        if 'symbols' in params:
            query_params.append(('symbols', params['symbols']))  # noqa: E501
        if 'dict' in params:
            query_params.append(('dict', params['dict']))  # noqa: E501
        if 'custom_dict' in params:
            query_params.append(('custom_dict', params['custom_dict']))  # noqa: E501
        if 'with_flag' in params:
            query_params.append(('with_flag', params['with_flag']))  # noqa: E501
        if 'hmm' in params:
            query_params.append(('hmm', params['hmm']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token_in_query']  # noqa: E501

        return self.api_client.call_api(
            '/v1/nlp/word/cut', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NlpWordCutItemForResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
